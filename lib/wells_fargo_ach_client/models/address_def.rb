=begin
#ACH-Payments

#Simplify payment processes by seamlessly integrating ACH payments straight into your business flow. 

OpenAPI spec version: v1
Contact: gateway@wellsfargo.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.6

=end

require 'date'

module WellsFargoAchClient
  # Address of the object referenced.
  class AddressDEF
    # ISO 3166 Two-character alpha country code.
    attr_accessor :country

    # City or locality.
    attr_accessor :city

    # Street address line 1.Cannot contain a PO box.
    attr_accessor :address_line_1

    # Street address line 2.
    attr_accessor :address_line_2

    # State, province, or other country sub-division.
    attr_accessor :state_code

    # Postal code. Punctuation, spaces, and special characters are not allowed. U.S. postal_code code â€“ 999999999 or 99999.
    attr_accessor :postal_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'country' => :'country',
        :'city' => :'city',
        :'address_line_1' => :'address_line_1',
        :'address_line_2' => :'address_line_2',
        :'state_code' => :'state_code',
        :'postal_code' => :'postal_code'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'country' => :'String',
        :'city' => :'String',
        :'address_line_1' => :'String',
        :'address_line_2' => :'String',
        :'state_code' => :'String',
        :'postal_code' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.has_key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.has_key?(:'address_line_1')
        self.address_line_1 = attributes[:'address_line_1']
      end

      if attributes.has_key?(:'address_line_2')
        self.address_line_2 = attributes[:'address_line_2']
      end

      if attributes.has_key?(:'state_code')
        self.state_code = attributes[:'state_code']
      end

      if attributes.has_key?(:'postal_code')
        self.postal_code = attributes[:'postal_code']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@country.nil? && @country.to_s.length > 2
        invalid_properties.push('invalid value for "country", the character length must be smaller than or equal to 2.')
      end

      if !@country.nil? && @country.to_s.length < 2
        invalid_properties.push('invalid value for "country", the character length must be great than or equal to 2.')
      end

      if !@city.nil? && @city.to_s.length > 30
        invalid_properties.push('invalid value for "city", the character length must be smaller than or equal to 30.')
      end

      if !@city.nil? && @city.to_s.length < 1
        invalid_properties.push('invalid value for "city", the character length must be great than or equal to 1.')
      end

      if !@address_line_1.nil? && @address_line_1.to_s.length > 55
        invalid_properties.push('invalid value for "address_line_1", the character length must be smaller than or equal to 55.')
      end

      if !@address_line_1.nil? && @address_line_1.to_s.length < 1
        invalid_properties.push('invalid value for "address_line_1", the character length must be great than or equal to 1.')
      end

      if !@address_line_2.nil? && @address_line_2.to_s.length > 55
        invalid_properties.push('invalid value for "address_line_2", the character length must be smaller than or equal to 55.')
      end

      if !@address_line_2.nil? && @address_line_2.to_s.length < 1
        invalid_properties.push('invalid value for "address_line_2", the character length must be great than or equal to 1.')
      end

      if !@state_code.nil? && @state_code.to_s.length > 3
        invalid_properties.push('invalid value for "state_code", the character length must be smaller than or equal to 3.')
      end

      if !@state_code.nil? && @state_code.to_s.length < 1
        invalid_properties.push('invalid value for "state_code", the character length must be great than or equal to 1.')
      end

      if !@postal_code.nil? && @postal_code.to_s.length > 9
        invalid_properties.push('invalid value for "postal_code", the character length must be smaller than or equal to 9.')
      end

      if !@postal_code.nil? && @postal_code.to_s.length < 1
        invalid_properties.push('invalid value for "postal_code", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@country.nil? && @country.to_s.length > 2
      return false if !@country.nil? && @country.to_s.length < 2
      return false if !@city.nil? && @city.to_s.length > 30
      return false if !@city.nil? && @city.to_s.length < 1
      return false if !@address_line_1.nil? && @address_line_1.to_s.length > 55
      return false if !@address_line_1.nil? && @address_line_1.to_s.length < 1
      return false if !@address_line_2.nil? && @address_line_2.to_s.length > 55
      return false if !@address_line_2.nil? && @address_line_2.to_s.length < 1
      return false if !@state_code.nil? && @state_code.to_s.length > 3
      return false if !@state_code.nil? && @state_code.to_s.length < 1
      return false if !@postal_code.nil? && @postal_code.to_s.length > 9
      return false if !@postal_code.nil? && @postal_code.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] country Value to be assigned
    def country=(country)
      if !country.nil? && country.to_s.length > 2
        fail ArgumentError, 'invalid value for "country", the character length must be smaller than or equal to 2.'
      end

      if !country.nil? && country.to_s.length < 2
        fail ArgumentError, 'invalid value for "country", the character length must be great than or equal to 2.'
      end

      @country = country
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if !city.nil? && city.to_s.length > 30
        fail ArgumentError, 'invalid value for "city", the character length must be smaller than or equal to 30.'
      end

      if !city.nil? && city.to_s.length < 1
        fail ArgumentError, 'invalid value for "city", the character length must be great than or equal to 1.'
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] address_line_1 Value to be assigned
    def address_line_1=(address_line_1)
      if !address_line_1.nil? && address_line_1.to_s.length > 55
        fail ArgumentError, 'invalid value for "address_line_1", the character length must be smaller than or equal to 55.'
      end

      if !address_line_1.nil? && address_line_1.to_s.length < 1
        fail ArgumentError, 'invalid value for "address_line_1", the character length must be great than or equal to 1.'
      end

      @address_line_1 = address_line_1
    end

    # Custom attribute writer method with validation
    # @param [Object] address_line_2 Value to be assigned
    def address_line_2=(address_line_2)
      if !address_line_2.nil? && address_line_2.to_s.length > 55
        fail ArgumentError, 'invalid value for "address_line_2", the character length must be smaller than or equal to 55.'
      end

      if !address_line_2.nil? && address_line_2.to_s.length < 1
        fail ArgumentError, 'invalid value for "address_line_2", the character length must be great than or equal to 1.'
      end

      @address_line_2 = address_line_2
    end

    # Custom attribute writer method with validation
    # @param [Object] state_code Value to be assigned
    def state_code=(state_code)
      if !state_code.nil? && state_code.to_s.length > 3
        fail ArgumentError, 'invalid value for "state_code", the character length must be smaller than or equal to 3.'
      end

      if !state_code.nil? && state_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "state_code", the character length must be great than or equal to 1.'
      end

      @state_code = state_code
    end

    # Custom attribute writer method with validation
    # @param [Object] postal_code Value to be assigned
    def postal_code=(postal_code)
      if !postal_code.nil? && postal_code.to_s.length > 9
        fail ArgumentError, 'invalid value for "postal_code", the character length must be smaller than or equal to 9.'
      end

      if !postal_code.nil? && postal_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "postal_code", the character length must be great than or equal to 1.'
      end

      @postal_code = postal_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          country == o.country &&
          city == o.city &&
          address_line_1 == o.address_line_1 &&
          address_line_2 == o.address_line_2 &&
          state_code == o.state_code &&
          postal_code == o.postal_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [country, city, address_line_1, address_line_2, state_code, postal_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = WellsFargoAchClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
