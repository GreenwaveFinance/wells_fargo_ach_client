=begin
#ACH-Payments

#Simplify payment processes by seamlessly integrating ACH payments straight into your business flow. 

OpenAPI spec version: v1
Contact: gateway@wellsfargo.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.6

=end

require 'date'

module WellsFargoAchClient
  # The payment object includes all the details of the payment information.
  class PaymentDEF
    # Amount of the payment.
    attr_accessor :payment_amount

    attr_accessor :payer

    attr_accessor :invoice_information

    # NACHA (National Automated Clearing House Association) requires that when a transaction is submitted for processing, the transaction must include an ACH Standard Entry Class (SEC) code to designate how the transaction was authorized by the receiver. CCP and PPP are Wells Fargo defined SEC Codes to represent Corporate Credit or Debit with Addenda and Preauthorized Payment or Deposit with Addenda. CCD - Corporate credit or debit; CCP - Corporate credit or debit with one invoice record; CTX - Corporate trade exchange; PPD - Prearranged payment or deposit; PPP - Prearranged payment or deposit with one invoice record; TEL - Telephone-initiated entry; WEB - Internet-initiated entry.
    attr_accessor :payment_format

    # Payment currency USD.
    attr_accessor :payment_currency

    attr_accessor :payee

    # Must be unique and created for every payment. May be used to retrieve the status of a payment.
    attr_accessor :payment_id

    # Description of the payment for the receiving party.
    attr_accessor :payment_description

    # Sends a request to make a payment to a payee or debit a payment from the payer. C - Payer sends a request to credit the payee (send funds from the payer to the payee). D Payee sends a request to debit the payer (pull funds from the payer to the payee).
    attr_accessor :debit_credit_indicator

    # Value is always NURG (ACH Payments API only supports non-urgent payments).
    attr_accessor :payment_method

    # The requested settlement date for the ACH payment (defaults to current date if not included). Payments can be future-dated up to 45 days. Format is YYYYMMDD.
    attr_accessor :payment_date

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'payment_amount' => :'payment_amount',
        :'payer' => :'payer',
        :'invoice_information' => :'invoice_information',
        :'payment_format' => :'payment_format',
        :'payment_currency' => :'payment_currency',
        :'payee' => :'payee',
        :'payment_id' => :'payment_id',
        :'payment_description' => :'payment_description',
        :'debit_credit_indicator' => :'debit_credit_indicator',
        :'payment_method' => :'payment_method',
        :'payment_date' => :'payment_date'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'payment_amount' => :'Float',
        :'payer' => :'PayerDEF',
        :'invoice_information' => :'InvoiceInformationDEF',
        :'payment_format' => :'String',
        :'payment_currency' => :'String',
        :'payee' => :'PayeeDEF',
        :'payment_id' => :'String',
        :'payment_description' => :'String',
        :'debit_credit_indicator' => :'String',
        :'payment_method' => :'String',
        :'payment_date' => :'Date'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'payment_amount')
        self.payment_amount = attributes[:'payment_amount']
      end

      if attributes.has_key?(:'payer')
        self.payer = attributes[:'payer']
      end

      if attributes.has_key?(:'invoice_information')
        self.invoice_information = attributes[:'invoice_information']
      end

      if attributes.has_key?(:'payment_format')
        self.payment_format = attributes[:'payment_format']
      end

      if attributes.has_key?(:'payment_currency')
        self.payment_currency = attributes[:'payment_currency']
      end

      if attributes.has_key?(:'payee')
        self.payee = attributes[:'payee']
      end

      if attributes.has_key?(:'payment_id')
        self.payment_id = attributes[:'payment_id']
      end

      if attributes.has_key?(:'payment_description')
        self.payment_description = attributes[:'payment_description']
      end

      if attributes.has_key?(:'debit_credit_indicator')
        self.debit_credit_indicator = attributes[:'debit_credit_indicator']
      end

      if attributes.has_key?(:'payment_method')
        self.payment_method = attributes[:'payment_method']
      end

      if attributes.has_key?(:'payment_date')
        self.payment_date = attributes[:'payment_date']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @payment_amount.nil?
        invalid_properties.push('invalid value for "payment_amount", payment_amount cannot be nil.')
      end

      if @payment_amount > 99999999.99
        invalid_properties.push('invalid value for "payment_amount", must be smaller than or equal to 99999999.99.')
      end

      if @payment_amount < 0
        invalid_properties.push('invalid value for "payment_amount", must be greater than or equal to 0.')
      end

      if @payer.nil?
        invalid_properties.push('invalid value for "payer", payer cannot be nil.')
      end

      if !@payment_currency.nil? && @payment_currency.to_s.length > 3
        invalid_properties.push('invalid value for "payment_currency", the character length must be smaller than or equal to 3.')
      end

      if !@payment_currency.nil? && @payment_currency.to_s.length < 3
        invalid_properties.push('invalid value for "payment_currency", the character length must be great than or equal to 3.')
      end

      if @payee.nil?
        invalid_properties.push('invalid value for "payee", payee cannot be nil.')
      end

      if @payment_id.nil?
        invalid_properties.push('invalid value for "payment_id", payment_id cannot be nil.')
      end

      if @payment_id.to_s.length > 15
        invalid_properties.push('invalid value for "payment_id", the character length must be smaller than or equal to 15.')
      end

      if @payment_id.to_s.length < 1
        invalid_properties.push('invalid value for "payment_id", the character length must be great than or equal to 1.')
      end

      if !@payment_description.nil? && @payment_description.to_s.length > 80
        invalid_properties.push('invalid value for "payment_description", the character length must be smaller than or equal to 80.')
      end

      if !@payment_description.nil? && @payment_description.to_s.length < 1
        invalid_properties.push('invalid value for "payment_description", the character length must be great than or equal to 1.')
      end

      if @debit_credit_indicator.nil?
        invalid_properties.push('invalid value for "debit_credit_indicator", debit_credit_indicator cannot be nil.')
      end

      if @payment_method.nil?
        invalid_properties.push('invalid value for "payment_method", payment_method cannot be nil.')
      end

      if @payment_method.to_s.length > 35
        invalid_properties.push('invalid value for "payment_method", the character length must be smaller than or equal to 35.')
      end

      if @payment_method.to_s.length < 1
        invalid_properties.push('invalid value for "payment_method", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @payment_amount.nil?
      return false if @payment_amount > 99999999.99
      return false if @payment_amount < 0
      return false if @payer.nil?
      payment_format_validator = EnumAttributeValidator.new('String', ['CCD', 'CCP', 'CTX', 'PPD', 'PPP', 'TEL', 'WEB'])
      return false unless payment_format_validator.valid?(@payment_format)
      return false if !@payment_currency.nil? && @payment_currency.to_s.length > 3
      return false if !@payment_currency.nil? && @payment_currency.to_s.length < 3
      return false if @payee.nil?
      return false if @payment_id.nil?
      return false if @payment_id.to_s.length > 15
      return false if @payment_id.to_s.length < 1
      return false if !@payment_description.nil? && @payment_description.to_s.length > 80
      return false if !@payment_description.nil? && @payment_description.to_s.length < 1
      return false if @debit_credit_indicator.nil?
      debit_credit_indicator_validator = EnumAttributeValidator.new('String', ['C', 'D'])
      return false unless debit_credit_indicator_validator.valid?(@debit_credit_indicator)
      return false if @payment_method.nil?
      return false if @payment_method.to_s.length > 35
      return false if @payment_method.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_amount Value to be assigned
    def payment_amount=(payment_amount)
      if payment_amount.nil?
        fail ArgumentError, 'payment_amount cannot be nil'
      end

      if payment_amount > 99999999.99
        fail ArgumentError, 'invalid value for "payment_amount", must be smaller than or equal to 99999999.99.'
      end

      if payment_amount < 0
        fail ArgumentError, 'invalid value for "payment_amount", must be greater than or equal to 0.'
      end

      @payment_amount = payment_amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_format Object to be assigned
    def payment_format=(payment_format)
      validator = EnumAttributeValidator.new('String', ['CCD', 'CCP', 'CTX', 'PPD', 'PPP', 'TEL', 'WEB'])
      unless validator.valid?(payment_format)
        fail ArgumentError, 'invalid value for "payment_format", must be one of #{validator.allowable_values}.'
      end
      @payment_format = payment_format
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_currency Value to be assigned
    def payment_currency=(payment_currency)
      if !payment_currency.nil? && payment_currency.to_s.length > 3
        fail ArgumentError, 'invalid value for "payment_currency", the character length must be smaller than or equal to 3.'
      end

      if !payment_currency.nil? && payment_currency.to_s.length < 3
        fail ArgumentError, 'invalid value for "payment_currency", the character length must be great than or equal to 3.'
      end

      @payment_currency = payment_currency
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_id Value to be assigned
    def payment_id=(payment_id)
      if payment_id.nil?
        fail ArgumentError, 'payment_id cannot be nil'
      end

      if payment_id.to_s.length > 15
        fail ArgumentError, 'invalid value for "payment_id", the character length must be smaller than or equal to 15.'
      end

      if payment_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "payment_id", the character length must be great than or equal to 1.'
      end

      @payment_id = payment_id
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_description Value to be assigned
    def payment_description=(payment_description)
      if !payment_description.nil? && payment_description.to_s.length > 80
        fail ArgumentError, 'invalid value for "payment_description", the character length must be smaller than or equal to 80.'
      end

      if !payment_description.nil? && payment_description.to_s.length < 1
        fail ArgumentError, 'invalid value for "payment_description", the character length must be great than or equal to 1.'
      end

      @payment_description = payment_description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] debit_credit_indicator Object to be assigned
    def debit_credit_indicator=(debit_credit_indicator)
      validator = EnumAttributeValidator.new('String', ['C', 'D'])
      unless validator.valid?(debit_credit_indicator)
        fail ArgumentError, 'invalid value for "debit_credit_indicator", must be one of #{validator.allowable_values}.'
      end
      @debit_credit_indicator = debit_credit_indicator
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_method Value to be assigned
    def payment_method=(payment_method)
      if payment_method.nil?
        fail ArgumentError, 'payment_method cannot be nil'
      end

      if payment_method.to_s.length > 35
        fail ArgumentError, 'invalid value for "payment_method", the character length must be smaller than or equal to 35.'
      end

      if payment_method.to_s.length < 1
        fail ArgumentError, 'invalid value for "payment_method", the character length must be great than or equal to 1.'
      end

      @payment_method = payment_method
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          payment_amount == o.payment_amount &&
          payer == o.payer &&
          invoice_information == o.invoice_information &&
          payment_format == o.payment_format &&
          payment_currency == o.payment_currency &&
          payee == o.payee &&
          payment_id == o.payment_id &&
          payment_description == o.payment_description &&
          debit_credit_indicator == o.debit_credit_indicator &&
          payment_method == o.payment_method &&
          payment_date == o.payment_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [payment_amount, payer, invoice_information, payment_format, payment_currency, payee, payment_id, payment_description, debit_credit_indicator, payment_method, payment_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = WellsFargoAchClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
