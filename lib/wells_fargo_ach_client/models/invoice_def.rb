=begin
#ACH-Payments

#Simplify payment processes by seamlessly integrating ACH payments straight into your business flow. 

OpenAPI spec version: v1
Contact: gateway@wellsfargo.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.6

=end

require 'date'

module WellsFargoAchClient
  # This a nested object that includes the detailed Invoice information. Multiple invoice sections can be included within invoice information.
  class InvoiceDEF
    # Value is PO (only supports purchase order). If sent, then include one or both below reference_document_number, reference_document_description.
    attr_accessor :reference_document_type

    attr_accessor :adjustment_information

    # Format is *#.## (digits, a decimal point, and two decimal places).
    attr_accessor :invoice_net_amount

    # Format is *#.## (digits, a decimal point, and two decimal places).
    attr_accessor :invoice_gross_amount

    # Required if reference_document_type (PO) is included.
    attr_accessor :reference_document_number

    # Invoice description.
    attr_accessor :invoice_description

    # Format is *#.## (digits, a decimal point, and two decimal places).
    attr_accessor :invoice_discount_amount

    # Required if invoice is sent. IV - Invoice, CM - Credit memo.
    attr_accessor :invoice_type

    # Required if reference_document_type (PO) is included.
    attr_accessor :reference_document_description

    # Required if invoice is sent.
    attr_accessor :invoice_number

    # Format is YYYYMMDD.
    attr_accessor :invoice_date

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'reference_document_type' => :'reference_document_type',
        :'adjustment_information' => :'adjustment_information',
        :'invoice_net_amount' => :'invoice_net_amount',
        :'invoice_gross_amount' => :'invoice_gross_amount',
        :'reference_document_number' => :'reference_document_number',
        :'invoice_description' => :'invoice_description',
        :'invoice_discount_amount' => :'invoice_discount_amount',
        :'invoice_type' => :'invoice_type',
        :'reference_document_description' => :'reference_document_description',
        :'invoice_number' => :'invoice_number',
        :'invoice_date' => :'invoice_date'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'reference_document_type' => :'String',
        :'adjustment_information' => :'InvoiceDEFAdjustmentInformation',
        :'invoice_net_amount' => :'Float',
        :'invoice_gross_amount' => :'Float',
        :'reference_document_number' => :'String',
        :'invoice_description' => :'String',
        :'invoice_discount_amount' => :'Float',
        :'invoice_type' => :'String',
        :'reference_document_description' => :'String',
        :'invoice_number' => :'String',
        :'invoice_date' => :'Date'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'reference_document_type')
        self.reference_document_type = attributes[:'reference_document_type']
      end

      if attributes.has_key?(:'adjustment_information')
        self.adjustment_information = attributes[:'adjustment_information']
      end

      if attributes.has_key?(:'invoice_net_amount')
        self.invoice_net_amount = attributes[:'invoice_net_amount']
      end

      if attributes.has_key?(:'invoice_gross_amount')
        self.invoice_gross_amount = attributes[:'invoice_gross_amount']
      end

      if attributes.has_key?(:'reference_document_number')
        self.reference_document_number = attributes[:'reference_document_number']
      end

      if attributes.has_key?(:'invoice_description')
        self.invoice_description = attributes[:'invoice_description']
      end

      if attributes.has_key?(:'invoice_discount_amount')
        self.invoice_discount_amount = attributes[:'invoice_discount_amount']
      end

      if attributes.has_key?(:'invoice_type')
        self.invoice_type = attributes[:'invoice_type']
      end

      if attributes.has_key?(:'reference_document_description')
        self.reference_document_description = attributes[:'reference_document_description']
      end

      if attributes.has_key?(:'invoice_number')
        self.invoice_number = attributes[:'invoice_number']
      end

      if attributes.has_key?(:'invoice_date')
        self.invoice_date = attributes[:'invoice_date']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@reference_document_type.nil? && @reference_document_type.to_s.length > 3
        invalid_properties.push('invalid value for "reference_document_type", the character length must be smaller than or equal to 3.')
      end

      if !@reference_document_type.nil? && @reference_document_type.to_s.length < 2
        invalid_properties.push('invalid value for "reference_document_type", the character length must be great than or equal to 2.')
      end

      if !@invoice_net_amount.nil? && @invoice_net_amount > 99999999.99
        invalid_properties.push('invalid value for "invoice_net_amount", must be smaller than or equal to 99999999.99.')
      end

      if !@invoice_net_amount.nil? && @invoice_net_amount < -99999999.99
        invalid_properties.push('invalid value for "invoice_net_amount", must be greater than or equal to -99999999.99.')
      end

      if !@invoice_gross_amount.nil? && @invoice_gross_amount > 99999999.99
        invalid_properties.push('invalid value for "invoice_gross_amount", must be smaller than or equal to 99999999.99.')
      end

      if !@invoice_gross_amount.nil? && @invoice_gross_amount < -99999999.99
        invalid_properties.push('invalid value for "invoice_gross_amount", must be greater than or equal to -99999999.99.')
      end

      if !@reference_document_number.nil? && @reference_document_number.to_s.length > 15
        invalid_properties.push('invalid value for "reference_document_number", the character length must be smaller than or equal to 15.')
      end

      if !@reference_document_number.nil? && @reference_document_number.to_s.length < 1
        invalid_properties.push('invalid value for "reference_document_number", the character length must be great than or equal to 1.')
      end

      if !@invoice_description.nil? && @invoice_description.to_s.length > 80
        invalid_properties.push('invalid value for "invoice_description", the character length must be smaller than or equal to 80.')
      end

      if !@invoice_description.nil? && @invoice_description.to_s.length < 1
        invalid_properties.push('invalid value for "invoice_description", the character length must be great than or equal to 1.')
      end

      if !@invoice_discount_amount.nil? && @invoice_discount_amount > 99999999.99
        invalid_properties.push('invalid value for "invoice_discount_amount", must be smaller than or equal to 99999999.99.')
      end

      if !@invoice_discount_amount.nil? && @invoice_discount_amount < -99999999.99
        invalid_properties.push('invalid value for "invoice_discount_amount", must be greater than or equal to -99999999.99.')
      end

      if !@reference_document_description.nil? && @reference_document_description.to_s.length > 80
        invalid_properties.push('invalid value for "reference_document_description", the character length must be smaller than or equal to 80.')
      end

      if !@reference_document_description.nil? && @reference_document_description.to_s.length < 1
        invalid_properties.push('invalid value for "reference_document_description", the character length must be great than or equal to 1.')
      end

      if !@invoice_number.nil? && @invoice_number.to_s.length > 30
        invalid_properties.push('invalid value for "invoice_number", the character length must be smaller than or equal to 30.')
      end

      if !@invoice_number.nil? && @invoice_number.to_s.length < 1
        invalid_properties.push('invalid value for "invoice_number", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@reference_document_type.nil? && @reference_document_type.to_s.length > 3
      return false if !@reference_document_type.nil? && @reference_document_type.to_s.length < 2
      return false if !@invoice_net_amount.nil? && @invoice_net_amount > 99999999.99
      return false if !@invoice_net_amount.nil? && @invoice_net_amount < -99999999.99
      return false if !@invoice_gross_amount.nil? && @invoice_gross_amount > 99999999.99
      return false if !@invoice_gross_amount.nil? && @invoice_gross_amount < -99999999.99
      return false if !@reference_document_number.nil? && @reference_document_number.to_s.length > 15
      return false if !@reference_document_number.nil? && @reference_document_number.to_s.length < 1
      return false if !@invoice_description.nil? && @invoice_description.to_s.length > 80
      return false if !@invoice_description.nil? && @invoice_description.to_s.length < 1
      return false if !@invoice_discount_amount.nil? && @invoice_discount_amount > 99999999.99
      return false if !@invoice_discount_amount.nil? && @invoice_discount_amount < -99999999.99
      invoice_type_validator = EnumAttributeValidator.new('String', ['IV', 'CM'])
      return false unless invoice_type_validator.valid?(@invoice_type)
      return false if !@reference_document_description.nil? && @reference_document_description.to_s.length > 80
      return false if !@reference_document_description.nil? && @reference_document_description.to_s.length < 1
      return false if !@invoice_number.nil? && @invoice_number.to_s.length > 30
      return false if !@invoice_number.nil? && @invoice_number.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] reference_document_type Value to be assigned
    def reference_document_type=(reference_document_type)
      if !reference_document_type.nil? && reference_document_type.to_s.length > 3
        fail ArgumentError, 'invalid value for "reference_document_type", the character length must be smaller than or equal to 3.'
      end

      if !reference_document_type.nil? && reference_document_type.to_s.length < 2
        fail ArgumentError, 'invalid value for "reference_document_type", the character length must be great than or equal to 2.'
      end

      @reference_document_type = reference_document_type
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_net_amount Value to be assigned
    def invoice_net_amount=(invoice_net_amount)
      if !invoice_net_amount.nil? && invoice_net_amount > 99999999.99
        fail ArgumentError, 'invalid value for "invoice_net_amount", must be smaller than or equal to 99999999.99.'
      end

      if !invoice_net_amount.nil? && invoice_net_amount < -99999999.99
        fail ArgumentError, 'invalid value for "invoice_net_amount", must be greater than or equal to -99999999.99.'
      end

      @invoice_net_amount = invoice_net_amount
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_gross_amount Value to be assigned
    def invoice_gross_amount=(invoice_gross_amount)
      if !invoice_gross_amount.nil? && invoice_gross_amount > 99999999.99
        fail ArgumentError, 'invalid value for "invoice_gross_amount", must be smaller than or equal to 99999999.99.'
      end

      if !invoice_gross_amount.nil? && invoice_gross_amount < -99999999.99
        fail ArgumentError, 'invalid value for "invoice_gross_amount", must be greater than or equal to -99999999.99.'
      end

      @invoice_gross_amount = invoice_gross_amount
    end

    # Custom attribute writer method with validation
    # @param [Object] reference_document_number Value to be assigned
    def reference_document_number=(reference_document_number)
      if !reference_document_number.nil? && reference_document_number.to_s.length > 15
        fail ArgumentError, 'invalid value for "reference_document_number", the character length must be smaller than or equal to 15.'
      end

      if !reference_document_number.nil? && reference_document_number.to_s.length < 1
        fail ArgumentError, 'invalid value for "reference_document_number", the character length must be great than or equal to 1.'
      end

      @reference_document_number = reference_document_number
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_description Value to be assigned
    def invoice_description=(invoice_description)
      if !invoice_description.nil? && invoice_description.to_s.length > 80
        fail ArgumentError, 'invalid value for "invoice_description", the character length must be smaller than or equal to 80.'
      end

      if !invoice_description.nil? && invoice_description.to_s.length < 1
        fail ArgumentError, 'invalid value for "invoice_description", the character length must be great than or equal to 1.'
      end

      @invoice_description = invoice_description
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_discount_amount Value to be assigned
    def invoice_discount_amount=(invoice_discount_amount)
      if !invoice_discount_amount.nil? && invoice_discount_amount > 99999999.99
        fail ArgumentError, 'invalid value for "invoice_discount_amount", must be smaller than or equal to 99999999.99.'
      end

      if !invoice_discount_amount.nil? && invoice_discount_amount < -99999999.99
        fail ArgumentError, 'invalid value for "invoice_discount_amount", must be greater than or equal to -99999999.99.'
      end

      @invoice_discount_amount = invoice_discount_amount
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_type Object to be assigned
    def invoice_type=(invoice_type)
      validator = EnumAttributeValidator.new('String', ['IV', 'CM'])
      unless validator.valid?(invoice_type)
        fail ArgumentError, 'invalid value for "invoice_type", must be one of #{validator.allowable_values}.'
      end
      @invoice_type = invoice_type
    end

    # Custom attribute writer method with validation
    # @param [Object] reference_document_description Value to be assigned
    def reference_document_description=(reference_document_description)
      if !reference_document_description.nil? && reference_document_description.to_s.length > 80
        fail ArgumentError, 'invalid value for "reference_document_description", the character length must be smaller than or equal to 80.'
      end

      if !reference_document_description.nil? && reference_document_description.to_s.length < 1
        fail ArgumentError, 'invalid value for "reference_document_description", the character length must be great than or equal to 1.'
      end

      @reference_document_description = reference_document_description
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_number Value to be assigned
    def invoice_number=(invoice_number)
      if !invoice_number.nil? && invoice_number.to_s.length > 30
        fail ArgumentError, 'invalid value for "invoice_number", the character length must be smaller than or equal to 30.'
      end

      if !invoice_number.nil? && invoice_number.to_s.length < 1
        fail ArgumentError, 'invalid value for "invoice_number", the character length must be great than or equal to 1.'
      end

      @invoice_number = invoice_number
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          reference_document_type == o.reference_document_type &&
          adjustment_information == o.adjustment_information &&
          invoice_net_amount == o.invoice_net_amount &&
          invoice_gross_amount == o.invoice_gross_amount &&
          reference_document_number == o.reference_document_number &&
          invoice_description == o.invoice_description &&
          invoice_discount_amount == o.invoice_discount_amount &&
          invoice_type == o.invoice_type &&
          reference_document_description == o.reference_document_description &&
          invoice_number == o.invoice_number &&
          invoice_date == o.invoice_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [reference_document_type, adjustment_information, invoice_net_amount, invoice_gross_amount, reference_document_number, invoice_description, invoice_discount_amount, invoice_type, reference_document_description, invoice_number, invoice_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = WellsFargoAchClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
