=begin
#ACH-Payments

#Simplify payment processes by seamlessly integrating ACH payments straight into your business flow. 

OpenAPI spec version: v1
Contact: gateway@wellsfargo.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.6

=end

require 'date'

module WellsFargoAchClient
  # Business or consumer receiving the payment. Requires name and bank_information for payee.
  class PayeeDEF
    attr_accessor :address

    attr_accessor :bank_information

    # Payee phone number.
    attr_accessor :phone

    # Use this field to indicate whether the payee is a consumer (C) or business (B).
    attr_accessor :business_consumer_indicator

    # Name of the payee.
    attr_accessor :name

    # Payee email address. No validation will be applied to the email address.
    attr_accessor :email

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'address' => :'address',
        :'bank_information' => :'bank_information',
        :'phone' => :'phone',
        :'business_consumer_indicator' => :'business_consumer_indicator',
        :'name' => :'name',
        :'email' => :'email'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'address' => :'AddressDEF',
        :'bank_information' => :'BankInformationDEF',
        :'phone' => :'String',
        :'business_consumer_indicator' => :'String',
        :'name' => :'String',
        :'email' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.has_key?(:'bank_information')
        self.bank_information = attributes[:'bank_information']
      end

      if attributes.has_key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.has_key?(:'business_consumer_indicator')
        self.business_consumer_indicator = attributes[:'business_consumer_indicator']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@phone.nil? && @phone.to_s.length > 10
        invalid_properties.push('invalid value for "phone", the character length must be smaller than or equal to 10.')
      end

      if !@phone.nil? && @phone.to_s.length < 10
        invalid_properties.push('invalid value for "phone", the character length must be great than or equal to 10.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length > 60
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 60.')
      end

      if @name.to_s.length < 1
        invalid_properties.push('invalid value for "name", the character length must be great than or equal to 1.')
      end

      if !@email.nil? && @email.to_s.length > 80
        invalid_properties.push('invalid value for "email", the character length must be smaller than or equal to 80.')
      end

      if !@email.nil? && @email.to_s.length < 1
        invalid_properties.push('invalid value for "email", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@phone.nil? && @phone.to_s.length > 10
      return false if !@phone.nil? && @phone.to_s.length < 10
      business_consumer_indicator_validator = EnumAttributeValidator.new('String', ['C', 'B'])
      return false unless business_consumer_indicator_validator.valid?(@business_consumer_indicator)
      return false if @name.nil?
      return false if @name.to_s.length > 60
      return false if @name.to_s.length < 1
      return false if !@email.nil? && @email.to_s.length > 80
      return false if !@email.nil? && @email.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] phone Value to be assigned
    def phone=(phone)
      if !phone.nil? && phone.to_s.length > 10
        fail ArgumentError, 'invalid value for "phone", the character length must be smaller than or equal to 10.'
      end

      if !phone.nil? && phone.to_s.length < 10
        fail ArgumentError, 'invalid value for "phone", the character length must be great than or equal to 10.'
      end

      @phone = phone
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] business_consumer_indicator Object to be assigned
    def business_consumer_indicator=(business_consumer_indicator)
      validator = EnumAttributeValidator.new('String', ['C', 'B'])
      unless validator.valid?(business_consumer_indicator)
        fail ArgumentError, 'invalid value for "business_consumer_indicator", must be one of #{validator.allowable_values}.'
      end
      @business_consumer_indicator = business_consumer_indicator
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 60
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 60.'
      end

      if name.to_s.length < 1
        fail ArgumentError, 'invalid value for "name", the character length must be great than or equal to 1.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if !email.nil? && email.to_s.length > 80
        fail ArgumentError, 'invalid value for "email", the character length must be smaller than or equal to 80.'
      end

      if !email.nil? && email.to_s.length < 1
        fail ArgumentError, 'invalid value for "email", the character length must be great than or equal to 1.'
      end

      @email = email
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          address == o.address &&
          bank_information == o.bank_information &&
          phone == o.phone &&
          business_consumer_indicator == o.business_consumer_indicator &&
          name == o.name &&
          email == o.email
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [address, bank_information, phone, business_consumer_indicator, name, email].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = WellsFargoAchClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
